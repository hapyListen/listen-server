// Code generated by goctl. DO NOT EDIT.

package song

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	songFieldNames          = builder.RawFieldNames(&Song{})
	songRows                = strings.Join(songFieldNames, ",")
	songRowsExpectAutoSet   = strings.Join(stringx.Remove(songFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	songRowsWithPlaceHolder = strings.Join(stringx.Remove(songFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	songModel interface {
		Insert(ctx context.Context, data *Song) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Song, error)
		Update(ctx context.Context, data *Song) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSongModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Song struct {
		Id             int64     `db:"id"`              // 歌曲ID,主键
		Name           string    `db:"name"`            // 歌曲名称
		SonglistId     string    `db:"songlist_id"`     // 歌单ID
		Address        string    `db:"address"`         // 歌曲资源地址
		PictureAddress string    `db:"picture_address"` // 歌曲封面地址
		Platform       string    `db:"platform"`        // 所属平台(bilibili、QQ、网易、酷我、酷狗...)
		SingerId       string    `db:"singer_id"`       // 歌手ID(平台下的歌手ID)
		Album          string    `db:"album"`           // 歌曲所属专辑（如果有）
		AlbumId        string    `db:"album_id"`        // 歌曲所属专辑ID(如果有,记录平台下的专辑ID)
		CollectionTime time.Time `db:"collection_time"` // 添加收藏时间
	}
)

func newSongModel(conn sqlx.SqlConn) *defaultSongModel {
	return &defaultSongModel{
		conn:  conn,
		table: "`song`",
	}
}

func (m *defaultSongModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSongModel) FindOne(ctx context.Context, id int64) (*Song, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", songRows, m.table)
	var resp Song
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSongModel) Insert(ctx context.Context, data *Song) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, songRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.SonglistId, data.Address, data.PictureAddress, data.Platform, data.SingerId, data.Album, data.AlbumId, data.CollectionTime)
	return ret, err
}

func (m *defaultSongModel) Update(ctx context.Context, data *Song) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, songRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.SonglistId, data.Address, data.PictureAddress, data.Platform, data.SingerId, data.Album, data.AlbumId, data.CollectionTime, data.Id)
	return err
}

func (m *defaultSongModel) tableName() string {
	return m.table
}
