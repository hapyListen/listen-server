// Code generated by goctl. DO NOT EDIT.

package songlist

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	songlistFieldNames          = builder.RawFieldNames(&Songlist{})
	songlistRows                = strings.Join(songlistFieldNames, ",")
	songlistRowsExpectAutoSet   = strings.Join(stringx.Remove(songlistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	songlistRowsWithPlaceHolder = strings.Join(stringx.Remove(songlistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	songlistModel interface {
		Insert(ctx context.Context, data *Songlist) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Songlist, error)
		Update(ctx context.Context, data *Songlist) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSonglistModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Songlist struct {
		Id             int64          `db:"id"`              // 歌曲ID,主键
		Name           string         `db:"name"`            // 歌曲名称
		PlaylistId     string         `db:"playlist_id"`     // 歌单ID
		Address        string         `db:"address"`         // 歌曲地址
		PictureAddress string         `db:"picture_address"` // 歌曲图片地址
		Platform       sql.NullString `db:"platform"`        // 所属平台(bilibili、QQ、网易、酷我、酷狗...)
		SingerId       sql.NullString `db:"singer_id"`       // 歌手ID(平台下的歌手ID)
		Album          sql.NullString `db:"album"`           // 歌曲所属专辑（如果有）
		AlbumId        sql.NullString `db:"album_id"`        // 歌曲所属专辑ID(如果有,记录平台下的专辑ID)
		CollectionTime sql.NullTime   `db:"collection_time"` // 添加收藏时间
	}
)

func newSonglistModel(conn sqlx.SqlConn) *defaultSonglistModel {
	return &defaultSonglistModel{
		conn:  conn,
		table: "`songlist`",
	}
}

func (m *defaultSonglistModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSonglistModel) FindOne(ctx context.Context, id int64) (*Songlist, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", songlistRows, m.table)
	var resp Songlist
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSonglistModel) Insert(ctx context.Context, data *Songlist) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, songlistRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.PlaylistId, data.Address, data.PictureAddress, data.Platform, data.SingerId, data.Album, data.AlbumId, data.CollectionTime)
	return ret, err
}

func (m *defaultSonglistModel) Update(ctx context.Context, data *Songlist) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, songlistRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.PlaylistId, data.Address, data.PictureAddress, data.Platform, data.SingerId, data.Album, data.AlbumId, data.CollectionTime, data.Id)
	return err
}

func (m *defaultSonglistModel) tableName() string {
	return m.table
}
